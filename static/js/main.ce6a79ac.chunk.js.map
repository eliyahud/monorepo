{"version":3,"sources":["App.jsx","helpers/loadAppContracts.js","hooks/useContractConfig.js","helpers/Transactor.js","reportWebVitals.js","index.jsx"],"names":["MetaMaskOnboarding","isMetaMaskInstalled","App","useState","firstName","setFirstName","lastName","setLastName","email","setEmail","alert","setAlert","errorAlert","setErrorAlert","loading","setLoading","config","useContractConfig","provider","setProvider","providerAndSigner","useUserProviderAndSigner","address","setAddress","contracts","useContractLoader","signer","useEffect","a","ethers","providers","Web3Provider","window","ethereum","request","method","userAccount","loadProvider","newAlert","text","setTimeout","newErrorAlert","createPIN","console","log","validator","isAlpha","isEmail","PersonalIdentityToken","create","on","to","error","getPIN","get","tokenID","tokenURI","cid","fetch","ipfsRequest","json","ipfsResponse","data","response","entityName","deletePIN","remove","className","length","role","type","id","placeholder","onChange","e","target","value","required","aria-hidden","onClick","contractListPromise","loadAppContracts","default","deployedContracts","contractsConfig","setContractsConfig","result","loadFunc","require","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce6a79ac.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MetaMaskOnboarding from '@metamask/onboarding';\n// eslint-disable-next-line camelcase\nimport {\n  encrypt,\n  recoverPersonalSignature,\n  recoverTypedSignatureLegacy,\n  recoverTypedSignature,\n  recoverTypedSignature_v4 as recoverTypedSignatureV4,\n} from 'eth-sig-util';\nimport { ethers } from 'ethers';\nimport { toChecksumAddress } from 'ethereumjs-util';\nimport { signTypedData } from 'eth-sig-util';\nimport { create } from 'ipfs-http-client';\nimport { useContractLoader, useUserProviderAndSigner } from 'eth-hooks';\nimport { useContractConfig } from './hooks/useContractConfig';\nimport { Transactor } from './helpers/Transactor';\nimport validator from 'validator';\n\nconst { isMetaMaskInstalled } = MetaMaskOnboarding;\n\nfunction App() {\n  const [ firstName, setFirstName ] = useState(\"\");\n  const [ lastName, setLastName ] = useState(\"\");\n  const [ email, setEmail ] = useState(\"\");\n  const [ alert, setAlert ] = useState(\"\");\n  const [ errorAlert, setErrorAlert ] = useState(\"\");\n  const [ loading, setLoading ] = useState(false);\n  const chainId = 42;\n  const config = useContractConfig();\n  const [ provider, setProvider ] = useState();\n  const providerAndSigner = useUserProviderAndSigner(provider);\n  const [ address, setAddress ] = useState();\n  const contracts = useContractLoader(providerAndSigner.signer, config, chainId);\n  \n  useEffect( () => {\n    const loadProvider = async() => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const userAccount = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      setAddress(userAccount[0]);\n      setProvider(provider);\n    }\n    loadProvider();\n  }, []);\n\n  const newAlert = (text) => {\n    setAlert(text);\n    setTimeout(() => {\n      setAlert(\"\");\n   }, 3500)\n  }\n\n  const newErrorAlert = (text) => {\n    setErrorAlert(text);\n    setTimeout(() => {\n      setErrorAlert(\"\");\n   }, 3500)\n  }\n\n  const encryptData = async(cleartext) => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts',\n    });\n\n    const encryptionKeyDisplay = await window.ethereum.request({\n      method: 'eth_getEncryptionPublicKey',\n      params: [accounts[0]],\n    });\n\n    const cyphertext = stringifiableToHex(\n      encrypt(\n        encryptionKeyDisplay,\n        { data: cleartext },\n        'x25519-xsalsa20-poly1305',\n      ),\n    );\n\n    return cyphertext;\n  }\n\n  const decryptData = async(cyphertext) => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_accounts',\n    });\n\n    const cleartext = await window.ethereum.request({\n      method: 'eth_decrypt',\n      params: [cyphertext, accounts[0]],\n    });\n\n    return cleartext;\n  }\n\n  const stringifiableToHex = (value) => {\n    return ethers.utils.hexlify(Buffer.from(JSON.stringify(value)));\n  }\n\n  const createPIN = async() => {\n    console.log(\"createPIN\");\n\n    if(firstName === \"\" || lastName === \"\" || email === \"\") {\n      newErrorAlert(\"Error: null data\");\n\n      return;\n    } else if( !validator.isAlpha(firstName) || !validator.isAlpha(lastName) ) {\n      newErrorAlert(\"Error: invalid name or surname\");\n\n      return;\n    } else if( !validator.isEmail(email) ) {\n      newErrorAlert(\"Error: invalid email\");\n\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      console.log(\"Minting...\");\n      await contracts.PersonalIdentityToken.create(firstName, lastName, email);\n      console.log(\"...OK\");\n\n      contracts.PersonalIdentityToken.on(\"IdentityTokenAssigned\", (to) => {\n        console.log(to);\n        newAlert(\"Token created for user \"+to);\n      });\n\n    } catch(e) {\n      console.log(\"...FAIL\");\n      console.error(e);\n      newErrorAlert(\"Error occurred\");\n    }\n\n    setFirstName(\"\");\n    setLastName(\"\");\n    setEmail(\"\");\n    setLoading(false);\n  }\n\n  const getPIN = async() => {\n    setLoading(true);\n\n    try {\n      const tokenID = await contracts.PersonalIdentityToken.get(address);\n      const cid = await contracts.PersonalIdentityToken.tokenURI(tokenID);\n      \n      const ipfsRequest = await fetch(`https://ipfs.io/ipfs/${cid}`);\n      const ipfsResponse = await ipfsRequest.json();\n      const request = await fetch(\"https://legalattorney.xyz/get/\"+ipfsResponse.data);\n      const response = await request.json();\n      \n      newAlert(\"Token was read and contains data regarding: \" + response.entityName);\n\n    } catch(e) {\n      console.log(\"...FAIL\");\n      console.error(e);\n      newErrorAlert(\"Error occurred\");\n    }\n\n    setLoading(false);\n  }\n\n  const deletePIN = async() => {\n    setLoading(true);\n\n    try {\n      console.log(\"Deleting...\");\n      await contracts.PersonalIdentityToken.remove();\n      console.log(\"...OK\");\n      newAlert(\"Token was deleted\");\n    } catch(e) {\n      console.log(\"...FAIL\");\n      console.error(e);\n      newErrorAlert(\"Error!\");\n    }\n    \n    setLoading(false);\n  }\n\n  return (\n    <div className=\"text-center\">\n      <span className=\"form-signin\">\n        <h1 className=\"h3 mb-3 font-weight-normal\">Personal Identity Token</h1>\n        { alert.length > 0 &&\n          <div className=\"alert alert-primary\" role=\"alert\">{alert}</div>\n        }\n        { errorAlert.length > 0 &&\n          <div className=\"alert alert-danger\" role=\"alert\">{errorAlert}</div>\n        }\n        <br />\n        <div className=\"mb-3\">\n          <input type=\"text\" className=\"form-control\" id=\"firstName\" placeholder=\"firstName\" onChange={(e) => setFirstName(e.target.value)} required />\n        </div>\n        <div className=\"mb-3\">\n          <input type=\"text\" className=\"form-control\" id=\"lastName\" placeholder=\"lastName\" onChange={(e) => setLastName(e.target.value)} required />\n        </div>\n        <div className=\"mb-3\">\n          <input type=\"email\" className=\"form-control\" id=\"email\" placeholder=\"email\" onChange={(e) => setEmail(e.target.value)} required />\n        </div>\n        {loading && \n          <>\n          <button className=\"btn btn-lg btn-primary btn-block\">\n            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"false\"></span>&nbsp;Loading...\n          </button>\n          <button className=\"btn btn-lg btn-success btn-block\">\n            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"false\"></span>&nbsp;Loading...\n          </button>\n          <button className=\"btn btn-lg btn-danger btn-block\">\n            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"false\"></span>&nbsp;Loading...\n          </button>\n          </>\n        }\n        {!loading && \n          <>\n            <button className=\"btn btn-lg btn-primary btn-block\" onClick={() => createPIN()}>Create Personal Identity NFT</button>\n            <button className=\"btn btn-lg btn-success btn-block\" onClick={() => getPIN()}>Read Personal Identity NFT</button>\n            <button className=\"btn btn-lg btn-danger btn-block\" onClick={() => deletePIN()}>Delete Personal Identity NFT</button>\n          </>\n        }\n        <p className=\"mt-5 mb-3 text-muted\">Personal Identity Token - made for ChainLink fall hack</p>\n      </span>\n    </div>\n  );\n}\n\nexport default App;\n","const contractListPromise = import(\"../abi/nft.json\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  return config;\n};\n","import { useState, useEffect } from \"react\";\nimport { loadAppContracts } from \"../helpers/loadAppContracts\";\n\nexport const useContractConfig = () => {\n  const [contractsConfig, setContractsConfig] = useState({});\n\n  useEffect(() => {\n    const loadFunc = async () => {\n      const result = await loadAppContracts();\n      setContractsConfig(result);\n    };\n    void loadFunc();\n  }, []);\n  return contractsConfig;\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\nconst BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\nconst DEBUG = false;\n\nexport const Transactor = (providerOrSigner, gasPrice, etherscan) => {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      var options = null;\n      var notify = null;\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.info({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}